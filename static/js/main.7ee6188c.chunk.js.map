{"version":3,"sources":["DataContext.js","Components/OrFilterPanel.js","_utils.js","Components/MyGrid.js","index.js"],"names":["DataContext","createContext","rowData","orFilteredRowData","setOrFilteredRowData","VirtualizedSelect","makeVirtualized","Select","OrFilterPanel","props","useState","availableFilterOptions","setAvailableFilterOptions","selectedFilterOptions","setSelectedFilterOptions","dataContext","React","useContext","useEffect","length","columnDefs","initFilterOptions","applyFilter","forEach","field","Set","row","Object","entries","value","add","set","sort","updatedFilteredRowData","values","every","selectedFilters","map","filter","some","str","className","toUpperCase","slice","multiple","virtualized","options","Array","from","label","onChange","params","selectedOptions","updatedSelectedFilterOptions","option","selectChangeHandler","searchable","onSearch","searchStr","searchResults","toString","toLowerCase","indexOf","updatedAvailableFilterOptions","searchChangeHandler","MyGrid","setGridApi","setGridColumnApi","minWidth","maxWidth","style","width","height","id","defaultColDef","flex","filterParams","newRowsAction","menuTabs","onGridReady","api","columnApi","immutableData","getRowNodeId","data","sideBar","toolPanels","labelDefault","labelKey","iconKey","toolPanel","toolPanelParams","defaultToolPanel","frameworkComponents","orFilterPanel","App","setRowData","fetch","then","res","json","ind","dataCopy","catch","err","console","log","Provider","render","document","querySelector"],"mappings":"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","file":"static/js/main.7ee6188c.chunk.js","sourcesContent":["import { createContext } from \"react\";\n\nconst DataContext = createContext({\n  rowData: [],\n  orFilteredRowData: [],\n  setOrFilteredRowData: () => { }\n});\n\nexport default DataContext;","import React, { useState, useEffect } from 'react';\nimport DataContext from '../DataContext.js';\nimport Select from 'react-select-me';\nimport makeVirtualized from 'react-select-me/lib/hoc/makeVirtualized';\nimport 'react-select-me/lib/ReactSelectMe.css';\nimport * as _ from '../_utils.js';\n\nconst VirtualizedSelect = makeVirtualized(Select);\n\nconst OrFilterPanel = props => {\n    const [availableFilterOptions, setAvailableFilterOptions] = useState({});\n    const [selectedFilterOptions, setSelectedFilterOptions] = useState({});\n    const dataContext = React.useContext(DataContext);\n\n    useEffect(() => {\n        if (\n            dataContext.rowData && dataContext.rowData.length > 0\n            && props.columnDefs && props.columnDefs.length > 0\n        ) {\n            initFilterOptions();\n        }\n    }, [dataContext.rowData, props.columnDefs]);\n\n    useEffect(() => {\n        applyFilter();\n    }, [selectedFilterOptions])\n\n    const initFilterOptions = () => {\n        let availableFilterOptions = {};\n        let selectedFilterOptions = {};\n        props.columnDefs.forEach(({ field }) => {\n            availableFilterOptions[field] = new Set();\n            selectedFilterOptions[field] = [];\n        });\n        dataContext.rowData.forEach(row => {\n            Object.entries(row).forEach(([field, value]) => availableFilterOptions[field] && availableFilterOptions[field].add(value))\n        });\n        // convert available filter option Sets into sorted arrays\n        Object.entries(availableFilterOptions).forEach(([field, set]) => {\n            availableFilterOptions[field] = [...set].sort();\n        })\n        setAvailableFilterOptions(availableFilterOptions);\n        setSelectedFilterOptions(selectedFilterOptions);\n    }\n\n    const selectChangeHandler = (selectedOptions, field) => {\n        let updatedSelectedFilterOptions = { ...selectedFilterOptions };\n        updatedSelectedFilterOptions[field] = selectedOptions.map(option => option.value);\n        setSelectedFilterOptions(updatedSelectedFilterOptions);\n    }\n\n    const applyFilter = () => {\n        let updatedFilteredRowData;\n        let noSelectedFilterOptions = Object.values(selectedFilterOptions).every(selectedFilters => selectedFilters.length === 0);\n\n        if (noSelectedFilterOptions) {\n            updatedFilteredRowData = dataContext.rowData.map(row => ({ ...row }));\n        } else {\n            updatedFilteredRowData = dataContext.rowData\n                .map(row => ({ ...row }))\n                .filter(row =>\n                    Object.entries(row).some(([field, value]) =>\n                        selectedFilterOptions[field] && selectedFilterOptions[field].some(selectedFilters => selectedFilters === value)\n                    )\n                );\n        }\n        // update context\n        dataContext.setOrFilteredRowData(updatedFilteredRowData);\n    }\n\n    const searchChangeHandler = (searchStr, field) => {\n        let searchResults = dataContext.rowData\n            .filter(row => row[field] && row[field].toString().toLowerCase().indexOf(searchStr.toLowerCase()) > -1)\n            .map(row => row[field])\n\n        let updatedAvailableFilterOptions = { ...availableFilterOptions }\n        updatedAvailableFilterOptions[field] = new Set(searchResults);\n\n        setAvailableFilterOptions(updatedAvailableFilterOptions);\n    }\n\n    return (\n        <form >\n            <h2>Or-Filter Panel</h2>\n            {props.columnDefs.map(({ field }) => availableFilterOptions[field] ? (\n                <div key={field} className=\"my-form-control\">\n                    <label>{_.capatalise(field)}</label>\n                    <VirtualizedSelect\n                        multiple\n                        virtualized\n                        options={Array.from(availableFilterOptions[field]).map(value => ({ value, label: value }))}\n                        value={selectedFilterOptions[field].map(value => ({ value, label: value }))}\n                        onChange={(params) => selectChangeHandler(params, field)}\n                        searchable\n                        onSearch={params => searchChangeHandler(params, field)}\n                    />\n                </div>\n            ) : null\n            )}\n        </form>\n    )\n}\n\nexport default OrFilterPanel;","export const capatalise = str => str[0].toUpperCase() + str.slice(1);","import React, { useState } from 'react';\nimport { AgGridReact } from 'ag-grid-react';\nimport 'ag-grid-enterprise';\nimport 'ag-grid-community/dist/styles/ag-grid.css';\nimport 'ag-grid-community/dist/styles/ag-theme-alpine.css';\n\nimport OrFilterPanel from './OrFilterPanel';\nimport DataContext from '../DataContext.js';\n\nconst MyGrid = () => {\n    const [gridApi, setGridApi] = useState(null);\n    const [gridColumnApi, setGridColumnApi] = useState(null);\n\n    const dataContext = React.useContext(DataContext);\n\n    const [columnDefs, setColumnDefs] = useState([\n        { field: 'athlete', minWidth: 150 },\n        { field: 'age', maxWidth: 90 },\n        { field: 'country', minWidth: 150 },\n        { field: 'year', maxWidth: 90 },\n        { field: 'date', minWidth: 150 },\n        { field: 'sport', minWidth: 150 },\n        { field: 'gold' },\n        { field: 'silver' },\n        { field: 'bronze' },\n        { field: 'total' }\n    ]);\n\n    const onGridReady = (params) => {\n        setGridApi(params.api);\n        setGridColumnApi(params.columnApi);\n    };\n\n    return (\n        <div style={{ width: '100%', height: '100vh' }}>\n            <div\n                id=\"myGrid\"\n                style={{\n                    height: '100%',\n                    width: '100%',\n                }}\n                className=\"ag-theme-alpine\"\n            >\n                <AgGridReact\n                    defaultColDef={{\n                        flex: 1,\n                        minWidth: 100,\n                        filter: true,\n                        filterParams: {\n                            newRowsAction: 'keep'\n                        },\n                        menuTabs: ['filterMenuTab', 'generalMenuTab', 'columnsMenuTab']\n                    }}\n                    columnDefs={columnDefs}\n                    onGridReady={onGridReady}\n                    rowData={dataContext.orFilteredRowData}\n                    immutableData={true}\n                    getRowNodeId={data => data.id}\n                    sideBar={{\n                        toolPanels: [\n                            {\n                                id: 'or-filtering',\n                                labelDefault: 'OR-filtering',\n                                labelKey: 'or-filtering',\n                                iconKey: 'filter',\n                                toolPanel: 'orFilterPanel',\n                                toolPanelParams: {\n                                    columnDefs: columnDefs,\n                                }\n                            },\n                            {\n                                id: 'and-filtering',\n                                labelDefault: 'AND-filtering',\n                                labelKey: 'and-filtering',\n                                iconKey: 'filter',\n                                toolPanel: 'agFiltersToolPanel',\n                            },\n\n                        ],\n                        defaultToolPanel: 'or-filtering',\n                    }}\n                    frameworkComponents={{ orFilterPanel: OrFilterPanel }}\n                />\n            </div>\n        </div>\n    );\n};\n\nexport default MyGrid;","import React, { useState, useEffect } from 'react';\nimport { render } from 'react-dom';\nimport './styles.css'\n\nimport MyGrid from './Components/MyGrid';\nimport DataContext from './DataContext.js';\n\nconst App = () => {\n  const [rowData, setRowData] = useState([]);\n  const [orFilteredRowData, setOrFilteredRowData] = useState([]);\n\n  useEffect(() => {\n    fetch('https://www.ag-grid.com/example-assets/olympic-winners.json')\n      .then((res) => res.json())\n      .then((data) => {\n        data.forEach((row, ind) => row.id = ind);\n        setRowData(data);\n        let dataCopy = data.map(row => ({ ...row }));\n        setOrFilteredRowData(dataCopy);\n      })\n      .catch(err => console.log(err));\n\n  }, []);\n\n  return (\n    <DataContext.Provider value={{ rowData, orFilteredRowData, setOrFilteredRowData }}>\n      <MyGrid />\n    </DataContext.Provider>\n  )\n}\n\nrender(<App />, document.querySelector('#root'));\n"],"sourceRoot":""}